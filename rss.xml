<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Russell McClellan</title>
        <link>http://www.russellmcc.com</link>
        <description><![CDATA[russellmcc.com]]></description>
        <atom:link href="http://www.russellmcc.com/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 15 Mar 2012 00:00:00 UT</lastBuildDate>
        <item>
    <title>3-Sat Online Puzzle Game</title>
    <link>http://www.russellmcc.com/posts/2012-03-15-3SAT.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>3-Sat Online Puzzle Game</h1>
    <h3>March 15, 2012</h3>
    <p>
    <a href="http://russellmcc.github.com/3-SAT/?puzzle=abcabCaBcaBC">3-SAT</a> was one-day project to implement a classic CS problem as a browser-based puzzle game.
    </p>
  </div>
  <div class="post">
    <h2>The Puzzle</h2>
<p>3-SAT is a puzzle game. You're presented with a finite number of letter triplets. Some letters are red, and some letters are black. You must pick one letter of each triplet, with the rule that a choice is only valid if you've never picked that particular letter in a different color. So, once you choose a black &quot;A&quot; in a triplet, you are never allowed to choose a red &quot;A&quot; in any other triplet.</p>
</div><div class="post">

<h2>Why</h2>
<p>3-SAT turns out to be important to computer science because it's perhaps the simplest example of a type of problem called an <em>NP-Complete</em> problem. Generally first or second year computer science majors will learn about these problems in a basic complexity theory class.</p>
<p>Briefly, an <em>NP-Complete</em> problem is both <em>NP</em> and <em>NP-Hard</em>. Being <em>NP</em> means that given a guess solution, you can quickly verify whether or not the guess is correct. In this case, you can just make sure that each triplet has a letter selected, and there are no copies of the same letters in different colors. Being <em>NP-Hard</em> means you can translate any <em>NP</em> problem into a 3-SAT problem.</p>
<p>I thought it would be a fun exercise to code up browser based &quot;puzzle game&quot; versions of classic CS problems like this, and create tools to translate puzzles from one to another. The project is also an excuse to learn about different single page application frameworks.</p>
</div><div class="post">

<h2>The Code</h2>
<p>available <a href="https://github.com/russellmcc/3-SAT">on GitHub</a>.</p>
<p>I used the &quot;ember.js&quot; framework for the UI, and coded everything in CoffeeScript.<br />My main goal in writing this was to learn a bit about the ember.js framework. Frankly, I wasn't a big fan of ember, as it had the sort of leaky-abstraction &quot;magic&quot; that I've come to deeply fear. By this I mean there are some features where the implementation is not covered in the documentation, but you have to know how everything works to use the framework correctly.</p>
  </div>
  <div class="post">
    <p>
All images and text are licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/deed.en_US">Creative Commons Attribution 3.0 United States License</a>, except as noted. Linked code, and embedded code examples are licensed separately.
    </p>
  </div>
</article>
]]></description>
    <pubDate>Thu, 15 Mar 2012 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2012-03-15-3SAT.html</guid>
</item>
<item>
    <title>Pareidoloop In Color</title>
    <link>http://www.russellmcc.com/posts/2012-07-20-pareidoloop-edits.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>Pareidoloop In Color</h1>
    <h3>July 20, 2012</h3>
    <p>
    I made some modifications to a face-generation toy called <a href="http://russellmcc.github.com/pareidoloop">pareidoloop</a>
    </p>
  </div>
  <div class="post">
    <h2>The ghost in the machine has a face</h2>
<p><img src="/images/plface0.png" alt="creepy face 1" /></p>
<p>Internet citizen Philip McCarthy created <a href="http://iobound.com/2012/08/pareidoloop/">pareidoloop</a>, a &quot;face&quot; generator that was simply a random-image generator hooked up in a loop to a face recognizer program. Things that look more like faces to the computer are kept, and things that look less like faces are discarded. After a long time, something vaguely representing a distorted face appears.</p>
<p><img src="/images/plface1.png" alt="creepy face 1" /></p>
<p>The images are visually very striking, and there's always something a little cosmically creepy about computer-generated art.</p>
<p>I made a few modifications to the original formula - the images are now in color, you can work at larger canvas sizes (although this would be slower), and there's a &quot;simulated annealing&quot; process instead of straight randomness to speed the process up while avoiding local maxima.</p>
<p><img src="/images/plface2.png" alt="creepy face 3" /></p>
</div><div class="post">

<h2>The code</h2>
<p>Avaiable <a href="https://github.com/russellmcc/pareidoloop">on GitHub</a>.</p>
  </div>
  <div class="post">
    <p>
All images and text are licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/deed.en_US">Creative Commons Attribution 3.0 United States License</a>, except as noted. Linked code, and embedded code examples are licensed separately.
    </p>
  </div>
</article>
]]></description>
    <pubDate>Fri, 20 Jul 2012 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2012-07-20-pareidoloop-edits.html</guid>
</item>
<item>
    <title>Creating This Website</title>
    <link>http://www.russellmcc.com/posts/2012-10-04-This-Website.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>Creating This Website</h1>
    <h3>October  4, 2012</h3>
    <p>
    I auto-generate this site from <a href="http://daringfireball.net/projects/markdown/">markdown</a> code using Haskell.  The generation code includes a custom CSS processor to output modern, reactive CSS.
    </p>
  </div>
  <div class="post">
    <h2>Code</h2>
<p>Code is available <a href="http://www.github.com/russellmcc/site-gen">on GitHub</a></p>
<p>The code is based on a Haskell blog framework called <a href="http://jaspervdj.be/hakyll/">Hakyll</a>, although there is a CSS processor entirely of my own design.</p>
<p>If you're interested in how it works, most of the guts are in four short files:</p>
<hr />
<dl>
<dt><a href="https://github.com/russellmcc/site-gen/blob/master/site.hs">site.hs</a></dt>
<dd>contains the basic structure of the site. Hakyll 4 has finally removed all usage of the cumbersome <a href="http://www.haskell.org/arrows/">arrows</a> in its API, which are not my favorite abstraction for computation.
</dd>
</dl>
<hr />
<dl>
<dt><a href="https://github.com/russellmcc/site-gen/blob/master/cssTokenizer.hs">cssTokenizer.hs</a> and <a href="https://github.com/russellmcc/site-gen/blob/master/cssProcess.hs">cssProcess.hs</a></dt>
<dd>contain the custom CSS processor used to style the site. Since these files don't make any reference to the Hakyll framework, I was more free to write in a style I prefer. For cssProcess.hs I used <a href="https://personal.cis.strath.ac.uk/conor.mcbride/pub/she/">SHE</a> for the applicative idiom brackets. More syntactic sugar, please!
</dd>
</dl>
<hr />
<dl>
<dt><a href="https://github.com/russellmcc/site-gen/blob/master/stylesheets/frameless.scss">frameless.scss</a></dt>
<dd>includes the CSS used to style the site, heavily based on the <a href="http://framelessgrid.com/">&quot;frameless grid&quot;</a> design concept by Joni Korpi
</dd>
</dl>
</div><div class="post">

<h2>Design</h2>
<p>Most of the initial design concept was done by my friend <a href="http://www.kate-lindsay.com">Kate Lindsay</a>, although due to time constraints I had to finalize the design and do the mobile layout. Clearly, I'm not much of a designer :-).</p>
  </div>
  <div class="post">
    <p>
All images and text are licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/deed.en_US">Creative Commons Attribution 3.0 United States License</a>, except as noted. Linked code, and embedded code examples are licensed separately.
    </p>
  </div>
</article>
]]></description>
    <pubDate>Thu, 04 Oct 2012 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2012-10-04-This-Website.html</guid>
</item>
<item>
    <title>Eurorack Buffered Multiple</title>
    <link>http://www.russellmcc.com/posts/2013-01-27-hexbuffer.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>Eurorack Buffered Multiple</h1>
    <h3>January 27, 2013</h3>
    <p>
    I finally finished my first-ever DIY eurorack synthesizer module - the ever-humble buffered multiple.
    </p>
  </div>
  <div class="post">
    <h2>background</h2>
<p><a href="http://www.youtube.com/watch?v=GCyiDaM3boc">Modular synthesizers</a> are musical instruments made out of removable, replacable building blocks. Each module in a synth is able to interact with all the others to create unique sonic landscapes. While precise, <a href="http://www.soundonsound.com/sos/allsynthsecrets.htm">engineered</a> sounds are possible, the tactile physical nature of the system tends to encourage organic, creative exploration of the rich parameter space.</p>
<p>I've been interested in designing modules for this ecosystem for a long time, and now I've finally found a comfortable design and fabrication stack for it. As a proof of concept, I've created a very simple type of module called a buffered multiple.</p>
<p>A multiple is just a signal splitter, allowing the user to connect one output into multiple inputs of other modules.</p>
<h2>Electronic Design</h2>
<p>The electronics of a multiple are quite simple, really just consisting of a single op amp stage per output. There are two inputs, each providing three buffered clones of the input signal. If there is no jack plugged into the second input, all the outputs follow the first input signal.</p>
<p>For the board layout I used <a href="http://www.cadsoftusa.com/">EAGLE</a>, which is free for non-commercial use and does the job. The learning curve was quite difficult, and I probably wouldn't have been able to use it without the support of some experienced friends. While there are other electronic CAD choices out there, none are nearly as ubiquitous for hobbiests.</p>
<p>All of the design files for the project, including a list of all parts required, are <a href="https://github.com/russellmcc/hexbuffer">on GitHub</a> under a permissive license.</p>
<h2>Board Fabrication</h2>
<p><img src="/images/buffer_board.jpg" alt="PCB" /></p>
<p>The board was fabricated by <a href="http://oshpark.com/">OSH Park</a>, which was quite affordable at $6 per board. A nice feature of OSH Park is that they support EAGLE files, so no export to the more-standard gerber files is needed.</p>
<p>I hand assembled the boards with parts from <a href="http://www.mouser.com/ProjectManager/ProjectDetail.aspx?AccessID=8b942c2668">mouser</a>.</p>
<h2>Front Panel</h2>
<p><img src="/images/buffer_insitu.jpg" alt="completed buffer" /></p>
<p>The panel was lasercut out of acrylic from <a href="https://www.inventables.com/">Inventables</a> at a <a href="http://dangerawesome.co/">local lasercutting shop</a>. The design files were done in InkScape.</p>
  </div>
  <div class="post">
    <p>
All images and text are licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/deed.en_US">Creative Commons Attribution 3.0 United States License</a>, except as noted. Linked code, and embedded code examples are licensed separately.
    </p>
  </div>
</article>
]]></description>
    <pubDate>Sun, 27 Jan 2013 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2013-01-27-hexbuffer.html</guid>
</item>
<item>
    <title>Eagle Footprints for Eurorack</title>
    <link>http://www.russellmcc.com/posts/2013-02-07-erthenvar.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>Eagle Footprints for Eurorack</h1>
    <h3>February  7, 2013</h3>
    <p>
    In the course of developing my eurorack modules, I've had to create some custom EAGLE footprints.  Here they are under a permissive license!
    </p>
  </div>
  <div class="post">
    <h1>Libraries</h1>
<p>These are available on <a href="https://github.com/russellmcc/eurorack_eagle">github</a></p>
<hr />
<dl>
<dt><a href="https://raw.github.com/russellmcc/eurorack_eagle/master/erthenvar.lbr">erthenvar.lbr</a></dt>
<dd>Contains tested footprints for the wonderfully made <a href="http://erthenvar.com/store/eurodiy/35hardware">erthenvar</a> vertical mount jacks.
</dd>
</dl>
<hr />
<dl>
<dt><a href="https://raw.github.com/russellmcc/eurorack_eagle/master/eurorack.lbr">eurorack.lbr</a></dt>
<dd>Contains tested footprints for doepfer-style power connectors in both 10 and 16 pin.
</dd>
</dl>
  </div>
  <div class="post">
    <p>
All images and text are licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/deed.en_US">Creative Commons Attribution 3.0 United States License</a>, except as noted. Linked code, and embedded code examples are licensed separately.
    </p>
  </div>
</article>
]]></description>
    <pubDate>Thu, 07 Feb 2013 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2013-02-07-erthenvar.html</guid>
</item>
<item>
    <title>audiounitjs</title>
    <link>http://www.russellmcc.com/posts/2013-02-24-audiounitjs.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>audiounitjs</h1>
    <h3>February 24, 2013</h3>
    <p>
    One of the most frustrating, thankless, and time-consuming parts of audio plug-in development is creating the UI.  I've made a framework to allow audio programmers to use HTML and Javascript to quickly write plug-in UIs.  As a bonus, you can write your audio processing and UI code once, and then compile it as a Mac plug-in, a Mac standalone app, and an iOS app!
    </p>
  </div>
  <div class="post">
    <h1>Background</h1>
<p><a href="https://www.github.com/russellmcc/audiounitjs">audiounitjs</a> was borne out of frustration with two issues: audio plug-in UIs are annoying to write, and iOS audio programming is difficult even to those with much audio programming experience, due to poorly documented APIs.</p>
<p>In audiounitjs, you write a CoreAudio Audio Unit, and an HTML UI, and you get a Mac App, an iOS App, and a Audio Unit plug-in all using that UI, for free.</p>
</div><div class="post">
<h1>In Use</h1>
<p>audiounitjs is simply a scaffolding script. You create a simple configuration <code>.json</code> file, and then the script will produce an Xcode project filled with boilerplate. Then, you can edit the <code>audio.cpp</code> file to create audio processing source, and also the <code>ui</code> folder to create the HTML UI. Full documentation is available <a href="https://www.github.com/russellmcc/audiounitjs">on GitHub</a></p>
</div><div class="post">
<h1>Getting it</h1>
<p>Install via npm with <code>npm install -g audiounitjs</code>. I made a <a href="http://youtu.be/tqxOLf8EmdU">quick screencast</a> of the install process.</p>
</div><div class="post">
<h1>Future Features</h1>
<p>Currently, this is an extremely niche project, because it requires the user to be able to create Audio Unit C++ code. In the future I'd like to relax this requirement by adding some sort of JavaScript audio API. Perhaps the easiest way to do this would be to implement the WebAudio API for CoreAudio. If I did that, the JavaScript code would control all of the audio processing, and I could add the browser as a fourth target.</p>
<p>Another feature that might be fun would be to automatically support OSC messages mapped to Audio Unit parameters. This would be not difficult to implement and would allow the stand alone and iphone versions to be automated by something like <a href="http://www.duration.cc/">duration.cc</a>.</p>
  </div>
  <div class="post">
    <p>
All images and text are licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/deed.en_US">Creative Commons Attribution 3.0 United States License</a>, except as noted. Linked code, and embedded code examples are licensed separately.
    </p>
  </div>
</article>
]]></description>
    <pubDate>Sun, 24 Feb 2013 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2013-02-24-audiounitjs.html</guid>
</item>
<item>
    <title>web-based soundfx generator</title>
    <link>http://www.russellmcc.com/posts/2013-03-08-soundfxweb.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>web-based soundfx generator</h1>
    <h3>March  8, 2013</h3>
    <p>
    
    </p>
  </div>
  <div class="post">
    <p><a href="http://russellmcc.com/soundfxweb/">Here</a> is <a href="http://www.ghostfact.com/soundfx-machine">another emulation</a> of the <a href="http://www.youtube.com/watch?&amp;v=kokFu2xZt44">Remco soundfx machine</a>, this time for HTML5 audio.</p>
<p><img src="/images/soundfx_ss.png" alt="screen shot" /></p>
<p>The soundfx machine is a pretty weird toy. It's basically a <a href="http://en.wikipedia.org/wiki/Texas_Instruments_SN76477">noise generating chip</a> in a box, with each pin pulled out to a knob on the front panel. It's the same chip that was used to create the <a href="http://www.youtube.com/watch?v=KgJmRZ_oNmI">space invaders</a> sounds, among others classic video games. I still don't know who thought it was a good idea to give this to children!</p>
<p>I had a lot of fun playing with my previous emulation, so I thought I'd build a web-based one as a way to learn about the current state of Web Audio. The main audio coding only took a few hours, which is a testament to how well thought out and efficiently designed the Web Audio API is. I ran into a few nasty bugs (the most embarassing was <a href="https://code.google.com/p/chromium/issues/detail?id=82795">this</a>, which has existed since May 2011 on both Chrome and Safari), but basically it was smooth sailing.</p>
<p>Check out the <a href="http://www.coffeescript.org">coffeescript</a> code <a href="https://github.com/russellmcc/soundfxweb">on github</a>!</p>
  </div>
  <div class="post">
    <p>
All images and text are licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/deed.en_US">Creative Commons Attribution 3.0 United States License</a>, except as noted. Linked code, and embedded code examples are licensed separately.
    </p>
  </div>
</article>
]]></description>
    <pubDate>Fri, 08 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2013-03-08-soundfxweb.html</guid>
</item>
<item>
    <title>timeline.js</title>
    <link>http://www.russellmcc.com/posts/2013-03-29-timelinejs.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>timeline.js</h1>
    <h3>March 29, 2013</h3>
    <p>
    
    </p>
  </div>
  <div class="post">
    <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
<script src="http://code.jquery.com/jquery-migrate-1.1.1.min.js"></script>
<script src="https://www.russellmcc.com/timelinejs/timeline.min.js"></script>
<div id="timeline" style="height:200px;"></div>
<script>
  var p = [];
  var n = 35;
  for(var i = 0; i < n; ++i) {
      var h = 0.5 + 0.3 * Math.sin(i/n * Math.PI) * Math.cos(i * Math.PI);
      p.push([i/n, h]);
  }
  $('#timeline').timeline({
     points: p
  });
</script>

</div><div class="post">

<p><a href="http://russellmcc.com/timelinejs/">Timeline.js</a> is a jquery plug-in/html5 widget that allows you to add mult-touch and mouse enabled line editing to your web app. Retina screens welcome.</p>
<p>I plan to use it in future sequencer/synth projects for envelope editing.</p>
<p>Inspired by <a href="http://www.duration.cc/">duration.cc</a></p>
  </div>
  <div class="post">
    <p>
All images and text are licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/deed.en_US">Creative Commons Attribution 3.0 United States License</a>, except as noted. Linked code, and embedded code examples are licensed separately.
    </p>
  </div>
</article>
]]></description>
    <pubDate>Fri, 29 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2013-03-29-timelinejs.html</guid>
</item>
<item>
    <title>Eurorack Headphone Amp</title>
    <link>http://www.russellmcc.com/posts/2013-05-14-headphone.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>Eurorack Headphone Amp</h1>
    <h3>May 14, 2013</h3>
    <p>
    
    </p>
  </div>
  <div class="post">
    <p><img src="/images/headphone_side.jpg" alt="PCB" /></p>
<h2>background</h2>
<p>Continuing my slow but steady progress on my <a href="/posts/2013-01-27-hexbuffer.html">DIY modular synthesizer</a>, I've just finished my second module: an inexpensive headphone and line-level amplifier.</p>
<p>The humble purpose of this module is to bring signals from eurorack levels to both headphones and other audio equipment.</p>
<h2>Electronic Design</h2>
<p>Like my previous multiple module, the design doesn't contain anything novel or at all difficult. It's a totally standard amplifier, with levels set to the eurorack standard. One thing I was careful to do was use a socketed op-amp with a standard dual pinout, so users with <a href="http://tangentsoft.net/audio/opamps.html">discerning tastes</a> can replace the &quot;jellybean&quot; LF353 with a more &quot;smooth&quot; or &quot;laid back&quot; chip.</p>
<p>For the board layout I again used <a href="http://www.cadsoftusa.com/">EAGLE</a>, which is free for non-commercial use. This time, most of the design was SMT, with the exception of the previously mentioned op-amps.</p>
<p>Again, all of the design files for the project, including a list of all parts required, are <a href="https://github.com/russellmcc/eurorack_headphones">on GitHub</a> under a permissive license.</p>
<h2>Board Fabrication</h2>
<p><img src="/images/headphone_board.jpg" alt="PCB" /></p>
<p>Like last time, The board was fabricated by <a href="http://oshpark.com/">OSH Park</a>.</p>
<p>I'll write a future post on the SMT soldering technique I used, which involves lasers, toaster ovens, and a home-made stencil rig that I designed with my friend <a href="https://twitter.com/brendan0powers">Brendan</a>.</p>
<h2>Front Panel</h2>
<p><img src="/images/headphone_front.jpg" alt="completed buffer" /></p>
<p>Again, the panel was lasercut out of acrylic from <a href="https://www.inventables.com/">Inventables</a> at a <a href="http://dangerawesome.co/">local lasercutting shop</a>. The design files were done in InkScape.</p>
  </div>
  <div class="post">
    <p>
All images and text are licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/deed.en_US">Creative Commons Attribution 3.0 United States License</a>, except as noted. Linked code, and embedded code examples are licensed separately.
    </p>
  </div>
</article>
]]></description>
    <pubDate>Tue, 14 May 2013 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2013-05-14-headphone.html</guid>
</item>
<item>
    <title>Notes on the CEM3372 VCF</title>
    <link>http://www.russellmcc.com/posts/2013-06-14-CEM3372.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>Notes on the CEM3372 VCF</h1>
    <h3>June 14, 2013</h3>
    <p>
    
    </p>
  </div>
  <div class="post">
    <h1>Background</h1>
<p>Back in the heyday of the <a href="http://www.youtube.com/watch?v=xq4XOVde1Yk">giant</a> <a href="http://www.youtube.com/watch?v=Yv4EADAHwOA">analog</a> <a href="http://www.youtube.com/watch?v=FfhnF2SZTzE">polysynths</a> (i.e. the early to mid 80s), most synthesizers were powered by analog integrated circuits. The small size of these chips is what enabled synths to have so many voices in such a relatively small amount of space. Generally, each standard synth function (<a href="http://en.wikipedia.org/wiki/Voltage-controlled_oscillator">VCO</a>, <a href="http://en.wikipedia.org/wiki/Voltage-controlled_filter">VCF</a>, <a href="http://en.wikipedia.org/wiki/Voltage-controlled_amplifier">VCA</a>) was implemented by a dedicated chip.</p>
<p>At first glance, there's nothing incredibly extraordinary about the <a href="http://www.synthtech.com/cem/c3372pdf.pdf">CEM3372</a> VCF chip. It is famous for its use in the wildly flexible <a href="http://www.youtube.com/watch?v=kmfzoHDqPpk">Oberheim</a> <a href="http://www.youtube.com/watch?v=XN6LuK80KrM">Xpander</a> filter circuit, but the flexibility of that filter comes from a <a href="http://manuals.fdiskc.com/flat/Oberheim%20Xpander%20Service%20Manual.pdf">clever circuit trick</a>, not from anything specific to a single chip <a href="#foot1">[1]</a>. The CEM3372 also has an unusual number of &quot;convenience features&quot; - an integrated VCA for the output and two VCAs for voltage-controlled mixing on the input. Perhaps because of these extra features it was marketed as a &quot;signal processor&quot; chip instead of just a &quot;filter&quot;.</p>
<p>However, a deeper look reveals that the filtering works through a slightly different technology than the previous generation of VCF chips (e.g. <a href="http://curtiselectromusic.com/uploads/CEM_3320_Long.pdf">CEM3320</a>, SSM2040, IR3109), and I thought it might be worth writing up how it works as the technology has applications for discrete circuits as well.</p>
</div><div class="post">

<h1>Low Pass Filters</h1>
<p>Low pass filters are designed to remove high frequency components from a signal. Any components higher in frequency than a certain &quot;cut-off&quot; frequency will be removed. Musically, filters are one of the most basic electronic &quot;timbre modifiers&quot; and are included in almost all synthesizers. In fact, the &quot;sound&quot; of the synthesizer is often defined by the character of its filter. <a href="http://www.youtube.com/watch?v=b8TdBJDC_9Q">Whole genres</a> have sprung up exploiting the effect created from changing the cut-off frequency over time.</p>
<p>WARNING! The rest of this post will probably require some (hopefully basic) familiarity with circuits.</p>
<p>Perhaps the most basic lowpass filter consists of the following:</p>
<p><img src="/images/rc_divider.png" alt="RC Divider" /></p>
<p>This is a classic <a href="http://en.wikipedia.org/wiki/Voltage_divider">voltage divider</a>, with one of the resistors replaced with a capacitor. In fact, we can use the concept of <a href="http://en.wikipedia.org/wiki/Electrical_impedance">impedence</a> to treat the capacitor as a sort of frequency-dependent resistor<a href="#foot2">[2]</a>. For voltages that don't change, the capacitor acts as an open circuit; for high frequencies, it acts as a short; and for medium frequencies, somewhere in between. Just like a classic resistive voltage divider, when we put the capacitor in a divider the output voltage is:</p>
<p>$$V_{out} = V_{in}\frac{Z_{C}}{{Z_{C}}+{Z_{R}}}$$</p>
<p>which reduces to</p>
<p>$$V_{out} = V_{in}\frac{1}{1 + \frac{Z_R}{Z_C}}$$</p>
<p>If the voltage is constant, \(Z_C\) will become infinite so \(V_{out} = V_{in}\). If the voltage is high frequency, \(Z_C\) will be zero so \(V_{out} = 0\). The exact &quot;cut-off&quot; point turns out to be \(\frac{1}{2\pi RC}\) - but to understand why you'll need some <a href="https://en.wikipedia.org/wiki/RC_circuit">math</a> outside the scope of this blog post.</p>
<hr />
<p>While this voltage-in, voltage-out divider is the most common scheme for low pass filtering, there are of course many others. The way the CEM3372 works is by sending the signal through an input <em>current</em> rather than voltage, and then putting the resistor and capacitor in parallel:</p>
<p><img src="/images/rc_parallel.png" alt="RC Parallel" /></p>
<p>To analyze this arrangement, we use the <a href="http://en.wikipedia.org/wiki/Parallel_circuit">familiar formula</a> for parallel impedence:</p>
<p>$$V_{out}= I_{in}\frac{Z_RZ_C}{Z_C + Z_R}$$</p>
<p>or, after some alegbra</p>
<p>$$V_{out}= I_{in}Z_R\frac{1}{1 + \frac{Z_R}{Z_C}}$$</p>
<p>So, since \(Z_R\) does not vary with frequency, this is the exact same sort of lowpass filter as the first one we considered. In synthesizer filters, unlike most analog circuits, you need to be able to change the cut-off point of the filter based on electrical signals. To do this, we need some way to electronically control either the resistance or the capacitance.</p>
</div><div class="post">

<h1>The CEM3372 Circuit</h1>
<p>As described in <a href="http://www.google.com/patents/US4514704">this patent</a>, in the CEM3372, we simulate a current-controlled resistor by sending a large, steady current through a diode, and then sending a very small current as the signal. At a small enough signal current, the diode behaves as a voltage source followed by a resistor whose value is set by the large, steady current going through it. This is often called the diode's <a href="http://www.youtube.com/watch?v=QF6V74D2hbY">dynamic resistance.</a>. This is approximately \(\frac{26mV}{I_{steady}}\).</p>
<p>Since synthesizers generally send audio signals as voltages, the CEM3372 circuit also includes voltage-to-current converters for both the audio and control input. Here's the circuit with control signal's voltage-to-current converter not shown.</p>
<p><img src="/images/cem3372.png" alt="CEM3372 circuit" /></p>
<p>The control signal is sent as a current \(I_{control}\), and the audio input is \(V_{in}\). D1 and Q1 comprise a common circuit idiom called a <a href="http://en.wikipedia.org/wiki/Current_mirror">current mirror</a>, which mirrors the current through D1 out the collector of Q1. In this case, with \(V_{in}\) steady, both D1 and Q1 will have \(\frac{I_{control}}{2}\) going through them.</p>
<p>Now, let's assume \(V_{in}\) is quite small. Then increasing \(V_{in}\) will create a small increase of the current through Q1's collector. Let's call this small-scale current \(i_{in}\). Then this is mirrored by D1 and Q1, such that the same current as Q2's collector, i.e. \(\frac{I_{control}}{2}+i_{in}\) appears at Q1's collector. Since \(\frac{I_{control}}{2}\) is steady, none of it flows through C1, and it all goes through D2. Since the steady current is so much larger than \(i_{in}\), we can treat D2 as a dynamic resistor with resistance set by the steady current. So, in practice, we now have a very similar situation to the parallel low pass filter considered above, with the input current being the small-scale \(i_{in}\).</p>
</div><div class="post">

<h1>more advanced analysis</h1>
<p>The rest of the post will be a slightly more detailed analysis of this situation. The main result here is the transfer function is more-or-less the same as the RC filter case, except the amplitude of the output does not depend on the resistance.</p>
<p>The main difference in the CEM3372 situation from the currentbased- RC filter above is that in the RC filter, both the resistance and the capacitor are tied to ground. That's not true here, as D2 goes accross \(V_{out}\) to \(V_{in} - V_{Q2be}\), where \(V_{Q2be}\) is the base-emitter voltage of Q1. This acts as afeedback loop and eliminates the awkward effect of increasing the output amplitude when the resistance increases.</p>
<p>Let's recall first that for small signals, the diode acts as a resistor in series with a voltage source - call the voltage \(V_{D}\), and the resistance \(Z_{D}\). Since Q2 and D2 are matched, and the large-scale currents are the same, they have the same resistance <a href="#foot3">[3]</a> and voltage. So, the voltage accross D2 is given by \(V_{D} + i_{D2} Z_{D}\), and \(V_{Q2be} = V_{D} + i_{in} Z_{D}\)</p>
<p>So, to sum up, we have a system of equations:</p>
<p>$$i_{D2} + i_{C1} = i_{in}$$ $$V_{D2} = V_{D} + i_{D2}Z_{D}$$ $$V_{Q2be} = V_{D} + i_{in}Z_{D}$$ $$V_{out} = V_{D2} + V_{in} - V_{Q2be} = i_{C1} Z_{C1}$$</p>
<p>which can be solved with basic algebra to</p>
<p>$$V_{out} = V_{in}\frac{1}{1 + \frac{Z_{D}}{Z_{C1}}}$$</p>
<p>as we were trying to show. Using the formula for an RC filter's frequency cut-off from above, we have</p>
<p>$$f_{c} = \frac{I_{control}}{4 C \pi \cdot 26mV}$$</p>
<p>which, as we hoped, is directly controllable from the control current.</p>
</div><div class="post">

<h1>advantages</h1>
<p>Using a diode's dynamic resistance inside the differential pair arrangement provides many advantages over the standard <a href="http://en.wikipedia.org/wiki/Operational_transconductance_amplifier">OTA</a> based low-pass filter. The main one is that in the CEM3372, unlike competitor chips, the stages themselves don't need to have feedback. This means far fewer external components and less trimming required. The signal is passed in as a voltage and comes out as a voltage, so the stages can be cascaded without ever converting from current to voltage <a href="#foot4">[4]</a>.</p>
<p>The downside to all this is that you lose the ability to make a voltage-controlled integrator, which is a necessary part of the popular <a href="http://en.wikipedia.org/wiki/State_variable_filter">state variable</a> filter used in the <a href="http://www.youtube.com/watch?v=mTC4EM9DefQ">Oberheim SEM</a>, Jupiter 6, and many other synthesizers.</p>
</div><div class="post">

<h1>footnotes</h1>
<dl>
<dt><a id="foot1"></a> 1</dt>
<dd>Like many synthesizer-related tricks, its origin can be <a href="http://electronotes.netfirms.com/EN85VCF.PDF">traced back</a> to Bernie Hutchin's <a href="http://electronotes.netfirms.com/">ElectroNotes</a> newsletter.
</dd>
</dl>
<hr />
<dl>
<dt><a id="foot2"></a> 2</dt>
<dd>Of course, experienced circuiteers will recognize that in addition to having an effect on the amplitude, capacitors also have an effect on the phase.s
</dd>
</dl>
<hr />
<dl>
<dt><a id="foot3"></a> 3</dt>
<dd>Of course, for Q2, this is actually the so-called <a href="http://en.wikipedia.org/wiki/Transconductance">transimpedence</a>, the base-emitter voltage change per amp of collector-emitter current. Base currents aren't considered in this quick-and-dirty analysis.
</dd>
</dl>
<hr />
<dl>
<dt><a id="foot4"></a> 4</dt>
<dd>As mentioned in the patent, base currents will create errors that will have to be compensated when the stages are connected directly.
</dd>
</dl>
  </div>
  <div class="post">
    <p>
All images and text are licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/deed.en_US">Creative Commons Attribution 3.0 United States License</a>, except as noted. Linked code, and embedded code examples are licensed separately.
    </p>
  </div>
</article>
]]></description>
    <pubDate>Fri, 14 Jun 2013 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2013-06-14-CEM3372.html</guid>
</item>

    </channel> 
</rss>
