<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>More Facts</title>
        <link>http://www.russellmcc.com</link>
        <description><![CDATA[A Blog]]></description>
        <atom:link href="http://www.russellmcc.com/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 15 Mar 2012 00:00:00 UT</lastBuildDate>
        <item>
    <title>3-Sat Online Puzzle Game</title>
    <link>http://www.russellmcc.com/posts/2012-03-15-3SAT.html</link>
    <description><![CDATA[<!DOCTYPE HTML>

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8"></meta>
    <meta name="author" content="Your Name"></meta>
    <link rel="stylesheet" type="text/css" href="../stylesheets/syntax.css"></link>
    <link rel="stylesheet" type="text/css" href="../stylesheets/frameless.css"></link>
    <link href="http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu+Condensed|Ubuntu|Open+Sans:300|Open+Sans:400" rel="stylesheet" type="text/css"></link> 
    <script type="text/javascript" src="../scripts/ender.min.js"></script> 
    <script type="text/javascript" src="../scripts/coffee-script.js"></script>
    <script type="text/coffeescript" src="../scripts/debug_grid.coffee"></script>
    <meta name="viewport" content="width=device-width; initial-scale=1.0"></meta>
    <link rel="alternate" type="application/rss+xml" title="SimpleBlog" href="../rss.xml"></link>
    <title>3-Sat Online Puzzle Game</title>
    <script type="text/javascript">

      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-29024738-1']);
      _gaq.push(['_trackPageview']);

      (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

    </script>
  </head>
  <body>
<div id="contact">
    <h1><a href="../index.html">russell mcclellan</a></h1>
    <h2>musical hardware and software</h2>
    russell.mcclellan@gmail.com
</div>
<div id="content">
    <nav id="navbar">
      <ul>
      <li><a href="../tags/blog.html" class="taglink">blog<div class="whitesquare"></div></a></li>
      <li><a href="../tags/portfolio.html" class="taglink">portfolio<div class="whitesquare"></div></a></li>
      <li><a href="../resume.html" class="taglink">resume<div class="whitesquare"></div></a></li>
      <li><a href="../about.html" class="taglink">about<div class="whitesquare"></div></a></li>
      </ul>
    </nav>
    <article>
  <div class="post">
    <h1>3-Sat Online Puzzle Game</h1>
    <h3>March 15, 2012</h3>
    <p>
    <a href="http://russellmcc.github.com/3-SAT/?puzzle=abcabCaBcaBC">3-SAT</a> was one-day project to implement a classic CS problem as a browser-based puzzle game.
    </p>
  </div>
  <div class="post">
    <h2 id="the-puzzle">The Puzzle</h2>
<p>3-SAT is a puzzle game where you have a finite number of letter triplets. Some letters are red, and some letters are black. You must pick one letter of each triplet, with the rule that a choice is only valid if you’ve never picked that particular letter in a different color. So, once you choose a black “A” in a triplet, you are never allowed to choose a red “A”.</p>
</div><div class="post">

<h2 id="why">Why</h2>
<p>3-SAT turns out to be important to computer science because it’s perhaps the simplest to understand example of a type of problem called an <em>NP-Complete</em> problem. Generally first or second year computer science majors will learn about these problems in a basic complexity theory class.</p>
<p>Briefly, an <em>NP-Complete</em> problem is both <em>NP</em> and <em>NP-Hard</em>. Being <em>NP</em> means that given a guess solution, you can quickly verify whether or not the guess is correct. In this case, you can just make sure that each triplet has a letter selected, and there are no copies of the same letters in different colors. Being <em>NP-Hard</em> means you can translate any <em>NP</em> problem into a 3-SAT problem.</p>
<p>I thought it would be a fun exercise to code up browser based “puzzle game” versions of classic CS problems like this, and create tools to translate puzzles from one to another. The project is also an excuse to learn about different single page application frameworks.</p>
</div><div class="post">

<h2 id="the-code">The Code</h2>
<p>available <a href="https://github.com/russellmcc/3-SAT">on GitHub</a>.</p>
<p>I used the “ember.js” framework for the UI, and coded everything in CoffeeScript.</p>
<p>My main goal in writing this was to learn a bit about the ember.js framework. Frankly, I wasn’t a big fan of ember, as it had the sort of leaky-abstraction “magic” that I’ve come to deeply fear. By this I mean there are some features where the implementation is not covered in the documentation, but you have to know how everything works to use the framework correctly. This is a pet peeve of mine in API design.</p>
  </div>
</article>

  </div>
  </body>
</html>
]]></description>
    <pubDate>Thu, 15 Mar 2012 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2012-03-15-3SAT.html</guid>
</item>
<item>
    <title>Pareidoloop</title>
    <link>http://www.russellmcc.com/posts/2012-07-20-pareidoloop-edits.html</link>
    <description><![CDATA[<!DOCTYPE HTML>

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8"></meta>
    <meta name="author" content="Your Name"></meta>
    <link rel="stylesheet" type="text/css" href="../stylesheets/syntax.css"></link>
    <link rel="stylesheet" type="text/css" href="../stylesheets/frameless.css"></link>
    <link href="http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu+Condensed|Ubuntu|Open+Sans:300|Open+Sans:400" rel="stylesheet" type="text/css"></link> 
    <script type="text/javascript" src="../scripts/ender.min.js"></script> 
    <script type="text/javascript" src="../scripts/coffee-script.js"></script>
    <script type="text/coffeescript" src="../scripts/debug_grid.coffee"></script>
    <meta name="viewport" content="width=device-width; initial-scale=1.0"></meta>
    <link rel="alternate" type="application/rss+xml" title="SimpleBlog" href="../rss.xml"></link>
    <title>Pareidoloop</title>
    <script type="text/javascript">

      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-29024738-1']);
      _gaq.push(['_trackPageview']);

      (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

    </script>
  </head>
  <body>
<div id="contact">
    <h1><a href="../index.html">russell mcclellan</a></h1>
    <h2>musical hardware and software</h2>
    russell.mcclellan@gmail.com
</div>
<div id="content">
    <nav id="navbar">
      <ul>
      <li><a href="../tags/blog.html" class="taglink">blog<div class="whitesquare"></div></a></li>
      <li><a href="../tags/portfolio.html" class="taglink">portfolio<div class="whitesquare"></div></a></li>
      <li><a href="../resume.html" class="taglink">resume<div class="whitesquare"></div></a></li>
      <li><a href="../about.html" class="taglink">about<div class="whitesquare"></div></a></li>
      </ul>
    </nav>
    <article>
  <div class="post">
    <h1>Pareidoloop</h1>
    <h3>July 20, 2012</h3>
    <p>
    I made some modifications to a face-generation toy called <a href="http://russellmcc.github.com/pareidoloop">pareidoloop</a>
    </p>
  </div>
  <div class="post">
    <h2 id="the-ghost-in-the-machine-has-a-face">The ghost in the machine has a face</h2>
<img alt="creepy face 1" src="../images/plface0.png">
<p>Internet citizen Philip McCarthy created <a href="http://iobound.com/2012/08/pareidoloop/">pareidoloop</a>, a “face” generator that was simply a random-image generator hooked up in a loop to a face recognizer program. Things that look more like faces to the computer are kept, and things that look less like faces are discarded. After a long time, something vaguely representing a distorted face appears.</p>
<img alt="creepy face 2" src="../images/plface1.png">
<p>The images are visually very striking, and there’s always something a little cosmically creepy about computer-generated art.</p>
<p>I made a few modifications to the original formula - the images are now in color, you can work at larger canvas sizes (although this would be slower), and there’s a “simulated annealing” process instead of straight randomness to speed the process up while avoiding local maxima.</p>
<img alt="creepy face 3" src="../images/plface2.png">
</div><div class="post">

<h2 id="the-code">The code</h2>
<p>Avaiable <a href="https://github.com/russellmcc/pareidoloop">on GitHub</a>.</p>
  </div>
</article>

  </div>
  </body>
</html>
]]></description>
    <pubDate>Fri, 20 Jul 2012 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2012-07-20-pareidoloop-edits.html</guid>
</item>
<item>
    <title>This Website</title>
    <link>http://www.russellmcc.com/posts/2012-10-04-This-Website.html</link>
    <description><![CDATA[<!DOCTYPE HTML>

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8"></meta>
    <meta name="author" content="Your Name"></meta>
    <link rel="stylesheet" type="text/css" href="../stylesheets/syntax.css"></link>
    <link rel="stylesheet" type="text/css" href="../stylesheets/frameless.css"></link>
    <link href="http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu+Condensed|Ubuntu|Open+Sans:300|Open+Sans:400" rel="stylesheet" type="text/css"></link> 
    <script type="text/javascript" src="../scripts/ender.min.js"></script> 
    <script type="text/javascript" src="../scripts/coffee-script.js"></script>
    <script type="text/coffeescript" src="../scripts/debug_grid.coffee"></script>
    <meta name="viewport" content="width=device-width; initial-scale=1.0"></meta>
    <link rel="alternate" type="application/rss+xml" title="SimpleBlog" href="../rss.xml"></link>
    <title>This Website</title>
    <script type="text/javascript">

      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-29024738-1']);
      _gaq.push(['_trackPageview']);

      (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

    </script>
  </head>
  <body>
<div id="contact">
    <h1><a href="../index.html">russell mcclellan</a></h1>
    <h2>musical hardware and software</h2>
    russell.mcclellan@gmail.com
</div>
<div id="content">
    <nav id="navbar">
      <ul>
      <li><a href="../tags/blog.html" class="taglink">blog<div class="whitesquare"></div></a></li>
      <li><a href="../tags/portfolio.html" class="taglink">portfolio<div class="whitesquare"></div></a></li>
      <li><a href="../resume.html" class="taglink">resume<div class="whitesquare"></div></a></li>
      <li><a href="../about.html" class="taglink">about<div class="whitesquare"></div></a></li>
      </ul>
    </nav>
    <article>
  <div class="post">
    <h1>This Website</h1>
    <h3>October  4, 2012</h3>
    <p>
    This website is auto-generated from <a href="http://daringfireball.net/projects/markdown/">markdown</a> code using Haskell.  I wrote a custom CSS processor to output modern, reactive CSS.
    </p>
  </div>
  <div class="post">
    <h2 id="code">Code</h2>
<p>Code is available <a href="http://www.github.com/russellmcc/site-gen">on GitHub</a></p>
<p>The code is based on a Haskell blog framework called <a href="http://jaspervdj.be/hakyll/">Hakyll</a>, although there is a CSS processor entirely of my own design.</p>
<p>If you’re interested in how it works, most of the guts are in four short files:</p>
<dl>

<hr></hr>
<dt>
<a href="https://github.com/russellmcc/site-gen/blob/master/site.hs">site.hs</a>
</dt>
<dd> 
contains the basic structure of the site. Hakyll makes heavy use of <a href="http://www.haskell.org/arrows/">Arrows</a> in its API, which are not my favorite abstraction for computation.
</dd>

<hr></hr>
<dt>
<a href="https://github.com/russellmcc/site-gen/blob/master/cssTokenizer.hs">cssTokenizer.hs</a> and <a href="https://github.com/russellmcc/site-gen/blob/master/cssProcess.hs">cssProcess.hs</a>
</dt>
<dd> 
contain the custom CSS processor used to style the site. The style of these two files more closely matches the way I like to write Haskell. I prefer applicatives to arrows or monads whenever possible.
</dd>

<hr></hr>
<dt>
<a href="https://github.com/russellmcc/site-gen/blob/master/stylesheets/frameless.scss">frameless.scss</a>
</dt>
<dd> 
includes the CSS used to style the site, heavily based on the <a href="http://framelessgrid.com/">“frameless grid”</a> design concept by Joni Korpi
</dd>

</dl>

</div><div class="post">

<h2 id="design">Design</h2>
<p>Most of the initial design concept was done by my friend <a href="http://www.kate-lindsay.com">Kate Lindsay</a>, although due to time constraints I had to finalize the design and do the mobile layout. I’m still very much in the early stages of learning about what works and what doesn’t, so I’d appreciate any feedback or hints.</p>
  </div>
</article>

  </div>
  </body>
</html>
]]></description>
    <pubDate>Thu, 04 Oct 2012 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2012-10-04-This-Website.html</guid>
</item>

    </channel> 
</rss>
