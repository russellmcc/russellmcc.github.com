<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>More Facts</title>
        <link>http://www.russellmcc.com</link>
        <description><![CDATA[A Blog]]></description>
        <atom:link href="http://www.russellmcc.com/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 15 Mar 2012 00:00:00 UT</lastBuildDate>
        <item>
    <title>Project Log: 3-Sat Online Puzzle Game</title>
    <link>http://www.russellmcc.com/posts/2012-03-15-3SAT.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>Project Log: 3-Sat Online Puzzle Game</h1>
    <h3>March 15, 2012</h3>
    <p>
    <a href="http://russellmcc.github.com/3-SAT/?puzzle=abcabCaBcaBC">3-SAT</a> was one-day project to implement a classic CS problem as a browser-based puzzle game.
    </p>
  </div>
  <div class="post">
    <h2>The Puzzle</h2>
<p>3-SAT is a puzzle game. You're presented with a finite number of letter triplets. Some letters are red, and some letters are black. You must pick one letter of each triplet, with the rule that a choice is only valid if you've never picked that particular letter in a different color. So, once you choose a black &quot;A&quot; in a triplet, you are never allowed to choose a red &quot;A&quot; in any other triplet.</p>
</div><div class="post">

<h2>Why</h2>
<p>3-SAT turns out to be important to computer science because it's perhaps the simplest example of a type of problem called an <em>NP-Complete</em> problem. Generally first or second year computer science majors will learn about these problems in a basic complexity theory class.</p>
<p>Briefly, an <em>NP-Complete</em> problem is both <em>NP</em> and <em>NP-Hard</em>. Being <em>NP</em> means that given a guess solution, you can quickly verify whether or not the guess is correct. In this case, you can just make sure that each triplet has a letter selected, and there are no copies of the same letters in different colors. Being <em>NP-Hard</em> means you can translate any <em>NP</em> problem into a 3-SAT problem.</p>
<p>I thought it would be a fun exercise to code up browser based &quot;puzzle game&quot; versions of classic CS problems like this, and create tools to translate puzzles from one to another. The project is also an excuse to learn about different single page application frameworks.</p>
</div><div class="post">

<h2>The Code</h2>
<p>available <a href="https://github.com/russellmcc/3-SAT">on GitHub</a>.</p>
<p>I used the &quot;ember.js&quot; framework for the UI, and coded everything in CoffeeScript.<br />My main goal in writing this was to learn a bit about the ember.js framework. Frankly, I wasn't a big fan of ember, as it had the sort of leaky-abstraction &quot;magic&quot; that I've come to deeply fear. By this I mean there are some features where the implementation is not covered in the documentation, but you have to know how everything works to use the framework correctly.</p>
  </div>
</article>
]]></description>
    <pubDate>Thu, 15 Mar 2012 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2012-03-15-3SAT.html</guid>
</item>
<item>
    <title>Project Log: Pareidoloop Modifications</title>
    <link>http://www.russellmcc.com/posts/2012-07-20-pareidoloop-edits.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>Project Log: Pareidoloop Modifications</h1>
    <h3>July 20, 2012</h3>
    <p>
    I made some modifications to a face-generation toy called <a href="http://russellmcc.github.com/pareidoloop">pareidoloop</a>
    </p>
  </div>
  <div class="post">
    <h2>The ghost in the machine has a face</h2>
<p><img src="/images/plface0.png" alt="creepy face 1" /></p>
<p>Internet citizen Philip McCarthy created <a href="http://iobound.com/2012/08/pareidoloop/">pareidoloop</a>, a &quot;face&quot; generator that was simply a random-image generator hooked up in a loop to a face recognizer program. Things that look more like faces to the computer are kept, and things that look less like faces are discarded. After a long time, something vaguely representing a distorted face appears.</p>
<p><img src="/images/plface1.png" alt="creepy face 1" /></p>
<p>The images are visually very striking, and there's always something a little cosmically creepy about computer-generated art.</p>
<p>I made a few modifications to the original formula - the images are now in color, you can work at larger canvas sizes (although this would be slower), and there's a &quot;simulated annealing&quot; process instead of straight randomness to speed the process up while avoiding local maxima.</p>
<p><img src="/images/plface2.png" alt="creepy face 3" /></p>
</div><div class="post">

<h2>The code</h2>
<p>Avaiable <a href="https://github.com/russellmcc/pareidoloop">on GitHub</a>.</p>
  </div>
</article>
]]></description>
    <pubDate>Fri, 20 Jul 2012 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2012-07-20-pareidoloop-edits.html</guid>
</item>
<item>
    <title>Project Log: This Website</title>
    <link>http://www.russellmcc.com/posts/2012-10-04-This-Website.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>Project Log: This Website</h1>
    <h3>October  4, 2012</h3>
    <p>
    I auto-generate this site from <a href="http://daringfireball.net/projects/markdown/">markdown</a> code using Haskell.  The generation code includes a custom CSS processor to output modern, reactive CSS.
    </p>
  </div>
  <div class="post">
    <h2>Code</h2>
<p>Code is available <a href="http://www.github.com/russellmcc/site-gen">on GitHub</a></p>
<p>The code is based on a Haskell blog framework called <a href="http://jaspervdj.be/hakyll/">Hakyll</a>, although there is a CSS processor entirely of my own design.</p>
<p>If you're interested in how it works, most of the guts are in four short files:</p>
<hr />
<dl>
<dt><a href="https://github.com/russellmcc/site-gen/blob/master/site.hs">site.hs</a></dt>
<dd>contains the basic structure of the site. Hakyll 4 has finally removed all usage of the cumbersome <a href="http://www.haskell.org/arrows/">arrows</a> in its API, which are not my favorite abstraction for computation.
</dd>
</dl>
<hr />
<dl>
<dt><a href="https://github.com/russellmcc/site-gen/blob/master/cssTokenizer.hs">cssTokenizer.hs</a> and <a href="https://github.com/russellmcc/site-gen/blob/master/cssProcess.hs">cssProcess.hs</a></dt>
<dd>contain the custom CSS processor used to style the site. Since these files don't make any reference to the Hakyll framework, I was more free to write in a style I prefer. For cssProcess.hs I used <a href="https://personal.cis.strath.ac.uk/conor.mcbride/pub/she/">SHE</a> for the applicative idiom brackets. More syntactic sugar, please!
</dd>
</dl>
<hr />
<dl>
<dt><a href="https://github.com/russellmcc/site-gen/blob/master/stylesheets/frameless.scss">frameless.scss</a></dt>
<dd>includes the CSS used to style the site, heavily based on the <a href="http://framelessgrid.com/">&quot;frameless grid&quot;</a> design concept by Joni Korpi
</dd>
</dl>
</div><div class="post">

<h2>Design</h2>
<p>Most of the initial design concept was done by my friend <a href="http://www.kate-lindsay.com">Kate Lindsay</a>, although due to time constraints I had to finalize the design and do the mobile layout. Clearly, I'm not much of a designer :-).</p>
  </div>
</article>
]]></description>
    <pubDate>Thu, 04 Oct 2012 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2012-10-04-This-Website.html</guid>
</item>
<item>
    <title>Project Log: Eurorack Buffered Multiple</title>
    <link>http://www.russellmcc.com/posts/2013-01-27-hexbuffer.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>Project Log: Eurorack Buffered Multiple</h1>
    <h3>January 27, 2013</h3>
    <p>
    I finally finished my first-ever DIY eurorack synthesizer module - the ever-humble buffered multiple.
    </p>
  </div>
  <div class="post">
    <h2>background</h2>
<p><a href="http://www.youtube.com/watch?v=GCyiDaM3boc">Modular synthesizers</a> are musical instruments made out of removable, replacable building blocks. Each module in a synth is able to interact with all the others to create unique sonic landscapes. While precise, <a href="http://www.soundonsound.com/sos/allsynthsecrets.htm">engineered</a> sounds are possible, the tactile physical nature of the system tends to encourage organic, creative exploration of the rich parameter space.</p>
<p>I've been interested in designing modules for this ecosystem for a long time, and now I've finally found a comfortable design and fabrication stack for it. As a proof of concept, I've created a very simple type of module called a buffered multiple.</p>
<p>A multiple is just a signal splitter, allowing the user to connect one output into multiple inputs of other modules.</p>
<h2>Electronic Design</h2>
<p>The electronics of a multiple are quite simple, really just consisting of a single op amp stage per output. There are two inputs, each providing three buffered clones of the input signal. If there is no jack plugged into the second input, all the outputs follow the first input signal.</p>
<p>For the board layout I used <a href="http://www.cadsoftusa.com/">EAGLE</a>, which is free for non-commercial use and does the job. The learning curve was quite difficult, and I probably wouldn't have been able to use it without the support of some experienced friends. While there are other electronic CAD choices out there, none are nearly as ubiquitous for hobbiests.</p>
<p>All of the design files for the project, including a list of all parts required, are <a href="https://github.com/russellmcc/hexbuffer">on GitHub</a> under a permissive license.</p>
<h2>Board Fabrication</h2>
<p><img src="/images/buffer_board.jpg" alt="PCB" /></p>
<p>The board was fabricated by <a href="http://oshpark.com/">OSH Park</a>, which was quite affordable at $6 per board. A nice feature of OSH Park is that they support EAGLE files, so no export to the more-standard gerber files is needed.</p>
<p>I hand assembled the boards with parts from <a href="http://www.mouser.com/ProjectManager/ProjectDetail.aspx?AccessID=8b942c2668">mouser</a>.</p>
<h2>Front Panel</h2>
<p><img src="/images/buffer_insitu.jpg" alt="completed buffer" /></p>
<p>The panel was lasercut out of acrylic from <a href="https://www.inventables.com/">Inventables</a> at a <a href="http://dangerawesome.co/">local lasercutting shop</a>. The design files were done in InkScape.</p>
  </div>
</article>
]]></description>
    <pubDate>Sun, 27 Jan 2013 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2013-01-27-hexbuffer.html</guid>
</item>
<item>
    <title>Eagle Footprints for Eurorack</title>
    <link>http://www.russellmcc.com/posts/2013-02-07-erthenvar.html</link>
    <description><![CDATA[<article>
  <div class="post">
    <h1>Eagle Footprints for Eurorack</h1>
    <h3>February  7, 2013</h3>
    <p>
    In the course of developing my eurorack modules, I've had to create some custom EAGLE footprints.  Here they are under a permissive license!
    </p>
  </div>
  <div class="post">
    <h1>Libraries</h1>
<p>These are available on <a href="https://github.com/russellmcc/eurorack_eagle">github</a></p>
<hr />
<dl>
<dt><a href="https://raw.github.com/russellmcc/eurorack_eagle/master/erthenvar.lbr">erthenvar.lbr</a></dt>
<dd>Contains tested footprints for the wonderfully made <a href="http://erthenvar.com/store/eurodiy/35hardware">erthenvar</a> vertical mount jacks.
</dd>
</dl>
<hr />
<dl>
<dt><a href="https://raw.github.com/russellmcc/eurorack_eagle/master/eurorack.lbr">eurorack.lbr</a></dt>
<dd>Contains tested footprints for doepfer-style power connectors in both 10 and 16 pin.
</dd>
</dl>
  </div>
</article>
]]></description>
    <pubDate>Thu, 07 Feb 2013 00:00:00 UT</pubDate>
    <guid>http://www.russellmcc.com/posts/2013-02-07-erthenvar.html</guid>
</item>

    </channel> 
</rss>
